{"version":3,"sources":["assets/js/navbarList.js","components/layouts/NavBar.js","App.js","serviceWorker.js","index.js","assets/images/amzentrix-logo.svg"],"names":["navbarList","label","icon","children","NavBar","Header","layout","SubMenu","menu","react_default","a","createElement","className","src","Logo","alt","width","height","type","theme","avatar","size","mode","defaultSelectedKeys","renderNavList","list","map","item","length","title","key","Item","navList","App","layouts_NavBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"mOAAeA,EAAA,CACb,CACEC,MAAO,8BACPC,KAAM,WACNC,SAAU,CACR,CACEF,MAAO,gBACPC,KAAM,aAER,CACED,MAAO,QACPC,KAAM,eAER,CACED,MAAO,eACPC,KAAM,WAER,CACED,MAAO,gBACPC,KAAM,UAIZ,CACED,MAAO,+BACPC,KAAM,YACNC,SAAU,CACR,CACEF,MAAO,gBACPC,KAAM,aAER,CACED,MAAO,qBACPC,KAAM,cAER,CACED,MAAO,mBACPC,KAAM,mBAER,CACED,MAAO,iBACPC,KAAM,UAER,CACED,MAAO,mBACPC,KAAM,UAER,CACED,MAAO,sBACPC,KAAM,aAER,CACED,MAAO,qBACPC,KAAM,QAER,CACED,MAAO,+BACPC,KAAM,YAER,CACED,MAAO,gBACPC,KAAM,UAIZ,CACED,MAAO,6BACPC,KAAM,aACNC,SAAU,WCZCC,MAlDf,WAAkB,IACRC,EADQC,EAAA,EACRD,OACAE,EAFQC,EAAA,EAERD,QA0BR,OACEE,EAAAC,EAAAC,cAACN,EAAD,CAAQO,UAAU,UAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMC,IAAI,OAAOC,MAAM,KAAKC,OAAO,QAG/CR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAAT,EAAA,GAAMgB,KAAK,OAAOC,MAAM,WACxBV,EAAAC,EAAAC,cAAAT,EAAA,GAAMgB,KAAK,OAAOC,MAAM,WACxBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAAS,EAAA,GAAQC,KAAM,KACdZ,EAAAC,EAAAC,cAAAT,EAAA,GAAMgB,KAAK,iBAIfT,EAAAC,EAAAC,cAAAH,EAAA,GAAMc,KAAK,aAAaC,oBAAqB,CAAC,kBAvC5B,SAAhBC,EAAgBC,GACpB,OAAOA,EAAKC,IAAI,SAAAC,GAAI,OAClBA,EAAKxB,UAAYwB,EAAKxB,SAASyB,OAC7BnB,EAAAC,EAAAC,cAACJ,EAAD,CACEsB,MACEpB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAAT,EAAA,GAAMgB,KAAMS,EAAKzB,OAChByB,EAAK1B,OAGV6B,IAAKH,EAAK1B,OAETuB,EAAcG,EAAKxB,WAGtBM,EAAAC,EAAAC,cAAAH,EAAA,EAAMuB,KAAN,CAAWD,IAAKH,EAAK1B,OACnBQ,EAAAC,EAAAC,cAAA,YACGgB,EAAKzB,KAAK0B,QAAUnB,EAAAC,EAAAC,cAAAT,EAAA,GAAMgB,KAAMS,EAAKzB,OACrCyB,EAAK1B,UAsBTuB,CAAcQ,MCvCRC,MAPf,WACE,OACExB,EAAAC,EAAAC,cAAAL,EAAA,OACEG,EAAAC,EAAAC,cAACuB,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.34ad87a5.chunk.js","sourcesContent":["export default [\r\n  {\r\n    label: 'Customer Service Management',\r\n    icon: 'solution',\r\n    children: [\r\n      {\r\n        label: 'CRM Dashboard',\r\n        icon: 'dashboard'\r\n      },\r\n      {\r\n        label: 'Notes',\r\n        icon: 'folder-open'\r\n      },\r\n      {\r\n        label: 'Fulfillments',\r\n        icon: 'compass'\r\n      },\r\n      {\r\n        label: 'Send Feedback',\r\n        icon: 'mail'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Business Intelligence Module',\r\n    icon: 'bar-chart',\r\n    children: [\r\n      {\r\n        label: 'BIM Dashboard',\r\n        icon: 'dashboard'\r\n      },\r\n      {\r\n        label: 'Inventory Forecast',\r\n        icon: 'area-chart'\r\n      },\r\n      {\r\n        label: 'Inbound Shipment',\r\n        icon: 'deployment-unit'\r\n      },\r\n      {\r\n        label: 'Sales Campaign',\r\n        icon: 'global'\r\n      },\r\n      {\r\n        label: 'Search in Amazon',\r\n        icon: 'amazon'\r\n      },\r\n      {\r\n        label: 'Business Task Input',\r\n        icon: 'pie-chart'\r\n      },\r\n      {\r\n        label: 'Business Analytics',\r\n        icon: 'bulb'\r\n      },\r\n      {\r\n        label: 'List Recommendations History',\r\n        icon: 'calendar'\r\n      },\r\n      {\r\n        label: 'Amazon Prices',\r\n        icon: 'tags'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'Sales and Marketing Module',\r\n    icon: 'line-chart',\r\n    children: []\r\n  }\r\n]\r\n","import React from 'react'\r\nimport { Menu, Layout, Icon, Avatar } from 'antd'\r\nimport Logo from 'assets/images/amzentrix-logo.svg'\r\nimport navList from 'assets/js/navbarList'\r\nimport 'assets/scss/layouts/NavBar.scss'\r\n\r\nfunction NavBar() {\r\n  const { Header } = Layout\r\n  const { SubMenu } = Menu\r\n\r\n  const renderNavList = list => {\r\n    return list.map(item =>\r\n      item.children && item.children.length ? (\r\n        <SubMenu\r\n          title={\r\n            <span>\r\n              <Icon type={item.icon} />\r\n              {item.label}\r\n            </span>\r\n          }\r\n          key={item.label}\r\n        >\r\n          {renderNavList(item.children)}\r\n        </SubMenu>\r\n      ) : (\r\n        <Menu.Item key={item.label}>\r\n          <span>\r\n            {item.icon.length && <Icon type={item.icon} />}\r\n            {item.label}\r\n          </span>\r\n        </Menu.Item>\r\n      )\r\n    )\r\n  }\r\n  return (\r\n    <Header className=\"NavBar\">\r\n      <div className=\"logo\">\r\n        <img src={Logo} alt=\"logo\" width=\"40\" height=\"40\" />\r\n      </div>\r\n\r\n      <div className=\"text-white right-widget\">\r\n        <Icon type=\"star\" theme=\"filled\" />\r\n        <Icon type=\"bell\" theme=\"filled\" />\r\n        <div className=\"avatar-widget\">\r\n          <Avatar size={30} />\r\n          <Icon type=\"caret-down\" />\r\n        </div>\r\n      </div>\r\n\r\n      <Menu mode=\"horizontal\" defaultSelectedKeys={['CRM Dashboard']}>\r\n        {renderNavList(navList)}\r\n      </Menu>\r\n    </Header>\r\n  )\r\n}\r\n\r\nexport default NavBar\r\n","import React from 'react'\r\nimport { Layout } from 'antd'\r\nimport './assets/scss/app.scss'\r\nimport NavBar from './components/layouts/NavBar'\r\nfunction App() {\r\n  return (\r\n    <Layout>\r\n      <NavBar />\r\n    </Layout>\r\n  )\r\n}\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/amzentrix-logo.8c26386c.svg\";"],"sourceRoot":""}